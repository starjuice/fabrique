Properties -> PropertyValidator -> ArgumentAdaptor -> Constructor => o

def fabricate(registry, plugin_identity, properties)
  registration = registry.find(plugin_identity)
  property_validator = registration.property_validator
  argument_adaptor = registration.argument_adaptor
  constructor = registration.constructor
  plugin_template = registration.template

  if property_validator.valid?(properties)
    arguments = argument_adaptor.adapt(properties)
    plugin = constructor.construct(plugin_template, arguments)
    return plugin
  else
    raise
  end
end

Identity

	* Makes no sense to use an ArgumentAdaptor (or, by implication, a
	  PropertyValidator).

	  So this is a good pressure to compose everything except Properties
	  into the Constructor, registered by plugin_identity.

Classical

	* Keywords
	* Positional
	* Builder?

	  If we say you can mix Classical constructor with Builder ArgumentAdaptor,
	  then the constructor must call a default constructor only (::new()), passing
	  in a block.

Builder

	  If we say Builder is a constructor, then it can pass adapted arguments *and*
	  a block to the adapted constructor.

	  So, does the world really have constructors that take arguments *and* a
	  builder block?

Lambda?

	  This could be used to allow *any* adaptation conceivably supported by the
	  interface of the provider type.

	  So, are there adaptations we might want that wouldn't be supported by
	  Identity, Classical and Builder? Yes, surely. But are they *factory*
	  adaptations? Well...

	  class BadlyDesigned
	    def initialize(first_name, last_name)
	      @first_name, @last_name = first_name, last_name
	    end

	    def set_title(title)
	      @title = title
	    end

	    def address
	      "#{@name} #{@first_name} #{@last_name}"
	    end
	  end

	  lambda_constructor = ->(type, properties) do
	    type.new(properties).tap { |o| o.set_title(properties[:title]) if properties.include?(:title) }
	  end
